{{- if .Values.mapproxy.enabled -}}

{{- $releaseName := .Release.Name -}}
{{- $chartName := include "mapproxy.name" . -}}
{{- $cloudProviderDockerRegistryUrl := include "mapproxy.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "mapproxy.cloudProviderImagePullSecretName" . -}}
{{ $caSecretName := ternary .Values.authentication.ca.externalSecretName (printf "%s%s" .Release.Name "-root-ca") .Values.authentication.ca.useExternal }}
{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}
{{ $postgresSecretName := ternary .Values.rasterCommon.db.secrets.externalSecretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.rasterCommon.db.secrets.useExternal }}
{{ $s3SecretName := ternary .Values.rasterCommon.storage.s3.secretName (printf "%s%s" .Release.Name  "-s3-secret") (ne .Values.rasterCommon.storage.s3.secretName "") }}

{{- if .Values.authentication.ca.enabled }}
{{- if and .Values.authentication.ca.useExternal (not .Values.authentication.ca.externalSecretName) }}
{{- fail "When using external ca secret the value for .Values.authentication.ca.externalSecretName should be set" }}
{{- end }}
{{- end }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  annotations: 
    collectord.io/index: {{ quote .Values.splunkIndex }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "mapproxy.environment" . }}
    release: {{ $releaseName }}
    {{- include "mapproxy.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mapproxy.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "mapproxy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "mapproxy.selectorLabels" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
      annotations:
        checksum/configmap: {{
         include (print $.Template.BasePath "/mapproxy-configmap.yaml") . | sha256sum }}
      {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      initContainers:
        ######################################################### Init Container Deployment #########################################################
        - name: init-mapproxy
          {{- with .Values.initContainer.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: INIT_MODE
              value: "true"
            - name: LOG_LEVEL
              value: {{ .Values.initContainer.env.logLevel }}
            - name: UPDATED_TIME_JSON_FILE_PATH
              value: /mapproxy/updated_time.json
            - name: YAML_DESTINATION_FILE_PATH
              value: /app/downloads/mapproxy.yaml
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "FS" }}
            - name: FS_YAML_SOURCE_FILE_PATH
              value: /configSource/mapproxy.yaml
            {{- end }}
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "S3" }}
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: accessKeyId
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: secretAccessKey
            {{- end }}
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "DB" }}  
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password                        
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-{{ $chartName }}-init-configmap  
          volumeMounts:
            - mountPath: /app/downloads
              name: mapproxy-config
            {{- if .Values.rasterCommon.db.sslEnabled }}
            - mountPath: {{ .Values.initContainer.env.ssl.CA_DIR }}
              name: ca-file
            - mountPath: {{ .Values.initContainer.env.ssl.KEY_DIR }}
              name: key-file
            - mountPath: {{ .Values.initContainer.env.ssl.CERT_DIR }}
              name: cert-file
            {{- end }}     
            {{- if .Values.authentication.ca.enabled }}
            - mountPath: "/usr/local/share/ca-certificates"
              name: root-ca
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - mountPath: "/etc/ssl/openssl.cnf"
              name: open-ssl
              subPath: "openssl.cnf"
            {{- end }}
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "FS" }}
            - mountPath: /configSource/mapproxy.yaml
              name: sources-storage
              subPath: config/mapproxy.yaml
            {{- end }}
            {{- if .Values.authentication.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: '/usr/local/share/ca-certificates/ca.crt'
            {{- end }}
          ports:
          - name: http
            containerPort: {{ .Values.mapproxy.targetPort }}
            protocol: TCP
          {{- if .Values.initContainer.resources.enabled }}
          resources:
            {{- toYaml .Values.initContainer.resources.value | nindent 12 }}
          {{- end }}
      containers:
        ######################################################### MapProxy Deployment #########################################################
        - name: mapproxy
          {{- with .Values.mapproxy.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }} 
          env:
            {{- if .Values.rasterCommon.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.rasterCommon.ca.path .Values.rasterCommon.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.rasterCommon.ca.path .Values.rasterCommon.ca.key | quote }}
            {{- end }}
            {{- if eq (upper .Values.rasterCommon.storage.tilesStorageProvider) "S3" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: accessKeyId
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: secretAccessKey
            {{- end }}
            {{- if .Values.authentication.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: '/usr/local/share/ca-certificates/ca.crt'
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-{{ $chartName }}-map-proxy-configmap
          {{- if .Values.mapproxy.resources.enabled }}
          resources:
            {{- toYaml .Values.mapproxy.resources.value | nindent 12 }}
          {{- end }}
          volumeMounts:
          - mountPath: /mapproxy/mapproxy.yaml
            name: mapproxy-config
            subPath: mapproxy.yaml
          {{- if .Values.authentication.ca.enabled }}
          - name: root-ca
            mountPath: "/usr/local/share/ca-certificates"
          {{- end }}
          {{- if .Values.authentication.ssl.enabled }}
          - name: open-ssl
            mountPath: "/etc/ssl/openssl.cnf"
            subPath: "openssl.cnf"
          {{- end }}
          - mountPath: "/mapproxy/uwsgi.ini"
            name: uwsgi-config
            subPath: uwsgi.ini
          - mountPath: "/mapproxy/log.ini"
            name: uwsgi-config
            subPath: log.ini
          {{- if .Values.rasterCommon.storage.fs.internalPvc.enabled}}
          - mountPath: /layerSources
            name: sources-storage
            subPath: {{ .Values.rasterCommon.storage.fs.internalPvc.tilesSubPath }}
          {{- end }}
          ports:
            - name: uwsgi
              containerPort: {{ .Values.mapproxy.uwsgi.httpSocket }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /service?REQUEST=GetCapabilities&SERVICE=WMTS
              port: {{ .Values.mapproxy.targetPort }}
            initialDelaySeconds: 30
            timeoutSeconds: 1
        ######################################################### Mapproxinator Deployment #########################################################
        - name: mapproxinator
          {{- with .Values.mapproxinator.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            {{- if .Values.rasterCommon.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.rasterCommon.ca.path .Values.rasterCommon.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.rasterCommon.ca.path .Values.rasterCommon.ca.key | quote }}
            {{- end }}
            - name: INIT_MODE
              value: "false"
            - name: UPDATED_TIME_JSON_FILE_PATH
              value: /mapproxy/updated_time.json
            - name: YAML_DESTINATION_FILE_PATH
              value: /mapproxy/mapproxy.yaml
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "FS" }}
            - name: FS_YAML_SOURCE_FILE_PATH
              value: /configSource/mapproxy.yaml
            {{- end }}
            {{- if (eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "S3") }}
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: accessKeyId
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $s3SecretName }}
                  key: secretAccessKey
            {{- end }}
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "DB" }} 
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password                        
            {{- end }}
            {{- if .Values.authentication.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: '/usr/local/share/ca-certificates/ca.crt'
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-mapproxinator-configmap
          volumeMounts:
            - mountPath: /mapproxy/mapproxy.yaml
              name: mapproxy-config
              subPath: mapproxy.yaml
            - mountPath: /mapproxy/updated_time.json
              name: mapproxy-config
              subPath: updated_time.json
            - mountPath: "/mapproxy/uwsgi.ini"
              name: uwsgi-config
              subPath: uwsgi.ini
            - mountPath: "/mapproxy/log.ini"
              name: uwsgi-config
              subPath: log.ini
            {{- if eq (upper .Values.rasterCommon.storage.mapproxyConfigProvider) "FS" }}
            - mountPath: /configSource/mapproxy.yaml
              name: sources-storage
              subPath: config/mapproxy.yaml
            {{- end }}
            {{- if .Values.rasterCommon.db.sslEnabled }}
            - mountPath: {{ .Values.mapproxinator.env.ssl.CA_DIR }}
              name: ca-file
            - mountPath: {{ .Values.mapproxinator.env.ssl.KEY_DIR }}
              name: key-file
            - mountPath: {{ .Values.mapproxinator.env.ssl.CERT_DIR }}
              name: cert-file
            {{- end }}
            {{- if .Values.authentication.ca.enabled }}
            - mountPath: "/usr/local/share/ca-certificates"
              name: root-ca
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - mountPath: "/etc/ssl/openssl.cnf"
              name: open-ssl
              subPath: "openssl.cnf"
            {{- end }}
          {{- if .Values.mapproxinator.resources.enabled }}
          resources:
            {{- toYaml .Values.mapproxinator.resources.value | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.mapproxinator.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.mapproxinator.targetPort }}
      volumes:
        - name: mapproxy-config
          emptyDir: {}
        {{- if .Values.rasterCommon.db.sslEnabled }}
        - name: ca-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: caFile
                path: ca.pem
        - name: key-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: keyFile
                path: key.pem
        - name: cert-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: certFile
                path: cert.pem
        {{- end }}    
        {{- if .Values.rasterCommon.ca.secretName }}
        - name: root-ca
          secret:
            secretName: {{.Values.rasterCommon.ca.secretName }}
        {{- end }}                
        {{- if .Values.authentication.ssl.enabled }}
        - name: open-ssl
          secret:
            secretName: {{ $sslSecretName }}
        {{- end }}
        - name: uwsgi-config
          configMap:
            name: {{ .Release.Name }}-{{ $chartName }}-init-configmap
            items:
            - key: "UWSGI_INI"
              path: "uwsgi.ini"
            - key: "LOG_INI"
              path: "log.ini"
        {{- if .Values.rasterCommon.storage.fs.internalPvc.enabled }}
        - name: sources-storage
          persistentVolumeClaim:
            claimName: {{ .Values.rasterCommon.storage.fs.internalPvc.name }}
        {{- end }}
{{- end -}}
