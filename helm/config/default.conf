{{- $chartName := include "mapproxy.name" . -}}
{{- $serviceName := include "service.fullname" . -}}
{{- $releaseName := .Release.Name -}}

{{- $path := "/" }}
{{- if .Values.mapproxy.ingress.enabled }}
{{- $path = .Values.mapproxy.ingress.path }}
{{- end }}
{{- if .Values.mapproxy.route.enabled }}
{{- $path = .Values.mapproxy.route.path }}
{{- end }}

{{- if and (eq $path "/") (eq (lower .Values.global.cloudProvider.flavor) "openshift") }}
{{- fail "Route or Ingress should be enabled when deploying to Openshift" }}
{{- end }}

# Define upstreams for WMS and WMTS respectively
upstream mapproxy-wms {
    server {{ $serviceName }}-wms:{{ .Values.mapproxy.uwsgi.socket }};
}

upstream mapproxy-wmts {
    server {{ $serviceName }}-wmts:{{ .Values.mapproxy.uwsgi.socket }};
}

{{- if .Values.nginx.cache.enabled }}
uwsgi_cache_path {{ .Values.nginx.cache.cachePath }} levels={{ .Values.nginx.cache.levels }}
keys_zone={{ .Values.nginx.cache.keysZone }}:{{ .Values.nginx.cache.keysZoneSize }}
max_size={{ .Values.nginx.cache.maxSize }} inactive={{ .Values.nginx.cache.inactive }} use_temp_path={{ .Values.nginx.cache.useTempPath }};
{{- end }}


server {
    listen      {{ .Values.nginx.nginxTargetPort }};
    # the domain name it will serve for
    server_name mapproxy;
    # max upload size, adjust to taste
    keepalive_timeout  500;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    send_timeout                600;
    client_max_body_size        5000;
    client_header_timeout       600;
    client_body_timeout         600;
    client_header_buffer_size   12288; # 12K
    large_client_header_buffers 4 12288; # 12K
    fastcgi_read_timeout        300;
    location /liveness {
        access_log    off;
        log_not_found off;
        return 200 "I'm alive\n";
    }

    # Handle all requests to /service and redirect according to wanted service type if provided
    location {{ $path }}/service {
        include uwsgi_params;
        if ($args ~* 'service=wmts') {
            {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
            set $domain {{ .Values.nginx.authorization.wmtsDomain }};
            {{ end }}
            rewrite ^ {{ $path }}/service/wmts last;
        }
        if ($args ~* 'service=wms') {
            {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
            set $domain {{ .Values.nginx.authorization.wmsDomain }};
            {{ end }}
            rewrite ^ {{ $path }}/service/wms last;
        }
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        auth_request /_validate_jwt;
        {{ end }}
        include nginx.mapproxy.conf;
        uwsgi_pass mapproxy-wmts;
    }

    # Special location for handling WMTS KVP requests
    location {{ $path }}/service/wmts {
        set $original_method $request_method;
        set $original_args $args;
        include uwsgi_params;
        include nginx.mapproxy.conf;
        include nginx.mapproxy.wmts.conf;
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        set $domain {{ .Values.nginx.authorization.wmtsDomain }};
        auth_request /_validate_jwt;
        {{ end }}
        uwsgi_pass mapproxy-wmts;
    }

    # Special location for handling WMS requests (only KVP is possible)
    location {{ $path }}/service/wms {
        set $original_method $request_method;
        set $original_args $args;
        include uwsgi_params;
        include nginx.mapproxy.conf;
        {{- if .Values.nginx.cache.enabled }}
        uwsgi_cache_key "$host$request_uri";
        uwsgi_cache {{ .Values.nginx.cache.keysZone }};
        # Specifically instruct not to cache and set cache_status=BYPASS
        uwsgi_no_cache "1";
        uwsgi_cache_bypass "1";
        {{- end }}
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        set $domain {{ .Values.nginx.authorization.wmsDomain }};
        auth_request /_validate_jwt;
        {{ end }}
        uwsgi_pass mapproxy-wms;
    }

    # Handle WMTS RESTfull requests
    location {{ $path }}/wmts {
        set $original_method $request_method;
        set $original_args $args;
        include uwsgi_params;
        include nginx.mapproxy.conf;
        include nginx.mapproxy.wmts.conf;
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        set $domain {{ .Values.nginx.authorization.wmtsDomain }};
        auth_request /_validate_jwt;
        {{ end }}
        uwsgi_pass mapproxy-wmts;
    }

    # Handle WMS RESTfull requests type (as it is supported in mapproxy)
    location {{ $path }}/wms {
        set $original_method $request_method;
        set $original_args $args;
        include uwsgi_params;
        include nginx.mapproxy.conf;
        # Specifically instruct not to cache and set cache_status=BYPASS
        proxy_no_cache "1";
        proxy_cache_bypass "1";
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        set $domain {{ .Values.nginx.authorization.wmsDomain }};
        auth_request /_validate_jwt;
        {{ end }}
        uwsgi_pass mapproxy-wms;
    }

    # Catch all requests that do not apply to other specific paths
    location {{ $path }} {
        set $original_method $request_method;
        set $original_args $args;
        {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
        set $domain {{ .Values.nginx.authorization.wmtsDomain }};
        auth_request /_validate_jwt;
        {{ end }}
        include nginx.mapproxy.conf;
        include uwsgi_params;
        uwsgi_pass mapproxy-wmts;
    }

    {{- if and (.Values.global.enabledOpala) (.Values.nginx.authorization.enabled) }}
    location = /_validate_jwt {
      internal;
      js_content auth.opaAuth;
    }
    
    location = /opa {
      internal;
      proxy_set_header Content-Type application/json;
      proxy_set_header x-api-key "eyJhbGciOiJSUzI1NiIsImtpZCI6Im1hcC1jb2xvbmllcy1pbnQifQ.eyJkIjpbInJhc3RlciIsInJhc3RlcldtcyIsInJhc3RlckV4cG9ydCIsImRlbSIsInZlY3RvciIsIjNkIl0sImlhdCI6MTY3NDYzMjM0Niwic3ViIjoibWFwY29sb25pZXMtYXBwIiwiaXNzIjoibWFwY29sb25pZXMtdG9rZW4tY2xpIn0.D1u28gFlxf_Z1bzIiRHZonUgrdWwhZy8DtmQj15cIzaABRUrGV2n_OJlgWTuNfrao0SbUZb_s0_qUUW6Gz_zO3ET2bVx5xQjBu0CaIWdmUPDjEYr6tw-eZx8EjFFIyq3rs-Fo0daVY9cX1B2aGW_GeJir1oMnJUURhABYRoh60azzl_utee9UdhDpnr_QElNtzJZIKogngsxCWp7tI7wkTuNCBaQM7aLEcymk0ktxlWEAt1E0nGt1R-bx-HnPeeQyZlxx4UQ1nuYTijpz7N8poaCCExOFeafj9T7megv2BzTrKWgfM1eai8srSgNa3I5wKuW0EyYnGZxdbJe8aseZg";
      proxy_pass {{ .Values.nginx.authorization.url }};
    }    
    {{ end }}   
}
