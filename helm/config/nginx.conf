
{{- $chartName := include "mapproxy.name" . -}}
{{- $releaseName := .Release.Name -}}

upstream mapproxy {
    server {{ $releaseName }}-{{ $chartName }}:{{ .Values.mapproxy.uwsgi.httpSocket }};
}

map $msec $nanosec {
    "~*(\d{10})\.(\d{3})" "$1$2000000";
}

{{- if .Values.nginx.cache.enable }}
proxy_cache_path {{ .Values.nginx.cache.cachePath }} levels={{ .Values.nginx.cache.levels }}
keys_zone={{ .Values.nginx.cache.keysZone }}:{{ .Values.nginx.cache.keysZoneSize }}
max_size={{ .Values.nginx.cache.maxSize }} inactive={{ .Values.nginx.cache.inactive }} use_temp_path={{ .Values.nginx.cache.useTempPath }};
{{- end }}

server {
    listen      {{ .Values.nginx.targetPort }};
    # the domain name it will serve for
    server_name mapproxy;
    # max upload size, adjust to taste
    keepalive_timeout  500;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    send_timeout                600;
    client_max_body_size        5000;
    client_header_timeout       600;
    client_body_timeout         600;
    fastcgi_read_timeout        300;
    location /liveness {
        return 200 "I'm alive\n";
    }
    location {{ .Values.mapproxy.route.path }} {
        {{- if .Values.nginx.cache.enable }}
        proxy_cache_key "$host$uri";
        proxy_cache {{ .Values.nginx.cache.keysZone }};
        {{- end }}
        proxy_pass http://mapproxy;
	    proxy_set_header Host $http_host;
	    proxy_set_header X-Script-Name {{ .Values.mapproxy.route.path }};
    }
}
